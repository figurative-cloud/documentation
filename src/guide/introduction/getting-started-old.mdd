---
json: 'this json'
custom_var: 'This is a custom variable'
---

# Getting Started with Reason

The API Engine is where you create your API handlers. A single API can handle multiple requests as defined by your prompt

<!-- > [!NOTE] -->
<!-- > This page shows how to create API Engine using either the CLI, API or Web console -->

::: tip
If you haven't setup your environment, [click here](./introductionsetup) first
:::

## Create Basic API Engine

To create an API Engine, simply pass in the required parameters and deploy your environment

:::tabs key:pref
== CLI

To create an API Engine on the terminal, run this command and follow the prompts

```
reasonai add api
```

When done, a new API will be created under `./reason/apis/yourAPIName` with JSON config similar to the following:

<<< @/snippets/new-api.json

Feel free to modify the file and then deploy when you are ready

```bash
reasonai api push
```

That's it. Your API Engine is deployed and live

<!-- == Curl -->
<!---->
<!-- ```bash -->
<!-- curl https://reasonai.dev/api/v1/apis -->
<!--     -X POST -->
<!--     -H "Authorization: Bearer xxxxxx" -->
<!--     - d '{ -->
<!--         "name": "usersAPI", -->
<!--         "description": "handles users crud actions", -->
<!--         "model":"gpt-4o-mini", -->
<!--         "instruction": "You are a user api..." -->
<!--         ... -->
<!--         }' -->
<!-- ``` -->
<!---->
<!-- == fetch -->
<!---->
<!-- ```js -->
<!-- await fetch('https://reasonai.dev/api/v1/apis', { -->
<!--   method: 'POST', -->
<!--   headers: { -->
<!--     Authorization: 'Beater xxxxxx', -->
<!--   }, -->
<!--   body: JSON.stringigy({ -->
<!--     name: 'usersAPI', -->
<!--     description: 'handles users crud actions', -->
<!--     model: 'gpt-4o-mini', -->
<!--     instruction: 'You are a user api...', -->
<!--     // ... -->
<!--   }), -->
<!-- }) -->
<!-- ``` -->

:::

::: tip
To learn more on effective prompt generations, [click here]()
<br/>
To see the full reference for creating an API Engine, [click here]()
:::

## Adding functions

:::tabs key:pref
== CLI
API Engines can call external functions to perform specific requests. Ensure that your prompt includes instructions on when to call the functions
First create the function

```bash
reasonai function add
```

Follow the wizard to create the function. The results will be available under `./reason/functions/yourFunctionName`

```json
{
  "name": "charactersAPI",
  "instruction": "When asked to get a list of characters, you call the getCharacters function \nWhen given Futurama character name, you call the getcharacterbyname function\n\nreturn results in JSON format",
  "model": "gpt-4o-mini",
  "responseFormat": "json_object",
  "tools": [
    {
      "name": "getCharacterByName",
      "type": "function"
    },
    {
      "name": "getCharacters",
      "type": "function"
    }
  ]
}
```

Modify the function as necessary and deploy when ready

```bash
reasonai function push
```

Once your function is ready, you can add it to the API Engine by modifying the config `./reason/apis/yourAPIName/yourAPIName.json`

```js
{
  "name": "charactersAPI",
  "instruction": "When asked to get a list of characters, you call the getCharacters function \nWhen given Futurama character name, you call the getcharacterbyname function\n\nreturn results in JSON format",
  "model": "gpt-4o-mini",
  "responseFormat": "json_object",
  "tools": [    // [!code ++:10]
    {
      "name": "getCharacterByName",
      "type": "function"
    },
    {
      "name": "getCharacters",
      "type": "function"
    }
  ]
}
```
